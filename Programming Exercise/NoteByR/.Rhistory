path <- '/Users/liumingyeh/Desktop/OpenCourse/Machine Learning by Standford/machine-learning-ex5/ex5/ex5data1.mat'
data <- readMat(path)
X <- cbind(rep(1, dim(data$X)[1]), data$X)
y <- data$y
theta <- c(1, 1)
lambda <- 10000000 # regularize
theta_norm<- normalEquation(X, y, lambda)
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta_opti <- computeTheta(X, y, theta, lambda = lambda, type = 'lin', method = 'optim')$theta
theta <- data.frame(theta_norm, theta_iter, theta_opti)
theta %>% showdf()
lambda <- 100000 # regularize
theta_norm<- normalEquation(X, y, lambda)
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta_opti <- computeTheta(X, y, theta, lambda = lambda, type = 'lin', method = 'optim')$theta
path <- '/Users/liumingyeh/Desktop/OpenCourse/Machine Learning by Standford/machine-learning-ex5/ex5/ex5data1.mat'
data <- readMat(path)
X <- cbind(rep(1, dim(data$X)[1]), data$X)
y <- data$y
theta <- c(1, 1)
lambda <- 100000 # regularize
theta_norm<- normalEquation(X, y, lambda)
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta_opti <- computeTheta(X, y, theta, lambda = lambda, type = 'lin', method = 'optim')$theta
theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
lambda <- 10000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta <- c(1, 1)
lambda <- 10000 # regularize
theta_norm<- normalEquation(X, y, lambda)
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
theta_opti <- computeTheta(X, y, theta, lambda = lambda, type = 'lin', method = 'optim')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(aes(x = X[,2], y = X %*% all_theta$theta_opti)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
lambda <- 100000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
lambda <- 50000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
lambda <- 40000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
lambda <- 20000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
lambda <- 10000 # regularize
theta_iter <- computeTheta(X, y, theta, lambda, alpha = 0.001, num_iters = 5000,
type = 'lin', method = 'iter')$theta
all_theta <- data.frame(theta_norm, theta_iter, theta_opti)
all_theta %>% showdf()
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(aes(x = X[,2], y = X %*% all_theta$theta_opti)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
data.frame(X = X[,2], y = y, iter = rep(0, length(y))
for(i in 1:10){
plot_df <- data.frame(X = X[,2], y = y, iter = rep(0, length(y))
for(i in 1:10){
X[, 2]
y
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y))
for(i in 1:10){
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
plot_df
for(i in 1:10){
opt <- computeTheta(X, y, theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = X %*% opt$theta, iter = rep(i, length(y))))
}
plot_df
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = X %*% opt$theta, iter = rep(i, length(y))))
}
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = factor(iter))) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y), colour = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, fill = factor(iter))) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df
ggplot(plot_df, aes(x = X, y = y)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(colour = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot(plot_df, aes(x = X, y = y)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(colours = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot(plot_df, aes(x = ~X, y = ~y)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(colours = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot(plot_df, aes(x = X, y = y)) +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(fill = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = X %*% opt$theta, iter = rep(character(i), length(y))))
}
plot_df
for(i in 1:10){
opt <- computeTheta(X, y, theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = X %*% opt$theta, iter = rep(i, length(y))))
}
plot_df
opt <- computeTheta(X, y, theta = c(1,1), lambda = i, type = 'lin', method = 'optim')
for(i in 1:10){
opt <- computeTheta(X, y, theta = c(1,1), lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = X %*% opt$theta, iter = rep(i, length(y))))
}
plot_df
for(i in 1:10){
opt <- computeTheta(X, y, theta = c(1,1), lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X[, 2] %*% opt$theta), iter = rep(i, length(y))))
}
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
for(i in 1:10){
opt <- computeTheta(X, y, theta = c(1,1), lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
length(y)
a<-data.frame(X=c(1,2), y=c(3,4))
b<-data.frame(X=c(5,6), y=c(7,8))
rbind(a,b)
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
ggplot(plot_df, aes(x = X, y = y)) +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(fill = factor(iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot(plot_df, aes(x = X, y = y)) +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(fill = iter) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df
plot_df[iter]
plot_df['iter']
plot_df['iter']<-character(plot_df['iter'])
plot_df['iter']<-as.character(plot_df['iter'])
plot_df
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
character(plot_df['iter'])
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = factor(iter))) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = 2)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = plot_df$iter == 2)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = (plot_df$iter == 2))) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
qplot(data = plot_df, x = x, y = y, color = iter, geom = "line")
plot_df
qplot(data = plot_df, x = x, y = y, color = factor(iter), geom = "line")
plot_df
plot_df$iter = as.character(plot_df$iter)
plot_df
qplot(data = plot_df, x = x, y = y, color = factor(iter), geom = "line")
qplot(data = plot_df, x = x, y = y, color = iter, geom = "line")
qplot(data = plot_df, x = x, y = y, colour = iter, geom = "line")
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = (plot_df$iter == 2))) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
# geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_point(aes(x = X[, 2], y = y))
plot_df
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_point(aes(x = X[, 2], y = y)) +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
for(i in 1:10000){
opt <- computeTheta(X, y, theta = theta, lambda = i, type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
for(i in 1:100){
opt <- computeTheta(X, y, theta = theta, lambda = (10 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:100){
opt <- computeTheta(X, y, theta = theta, lambda = (10 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df$iter = as.character(plot_df$iter)
plot_df
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df$iter = as.character(plot_df$iter)
plot_df
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)')
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient()
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, fill = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_manual(high="red",low="blue")
plot_df <- data.frame(X = X[, 2], y = y, iter = rep(0, length(y)))
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
ggplot() +
geom_line(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
plot_df[-(1:12),]
plot_df
plot_df<- plot_df[-(1:12),]
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue")
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue") +
geom_point(aes(x = X[, 2], y = y))
plot_df <- data.frame(X , y , iter)
plot_df <- data.frame(X =NULL, y =NULL, iter=NULL)
plot_df
for(i in 1:10){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(high="red",low="blue") +
geom_point(aes(x = X[, 2], y = y))
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y))
for(i in 1:100){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df <- data.frame(X =NULL, y =NULL, iter=NULL)
for(i in 1:100){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df$iter = as.character(plot_df$iter)
plot_df <- data.frame(X =NULL, y =NULL, iter=NULL)
for(i in 1:100){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y))
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x=mean(X[,2]), y=mean(y)))
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x=mean(X[,2]), y=mean(y)),color=red)
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x=mean(X[,2]), y=mean(y)),colour=red)
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x=mean(X[,2]), y=mean(y)),colour='red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(rainbow(4)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(rainbow(7)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(rainbow(100)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradientn(rainbow(100)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradientn(colours=rainbow(100)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradientn(colours=rainbow(7)) +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red') +
geom_line(aes(x = X[,2], y = X %*% all_theta$theta_opti), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red') +
geom_line(aes(x = X[,2], y = X %*% normalEquation(X, y, 0)), colour = 'red')
for(i in 1:1000){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
plot_df <- data.frame(X = NULL, y = NULL, iter = NULL)
for(i in 1:1000){
opt <- computeTheta(X, y, theta = theta, lambda = (1000 * i), type = 'lin', method = 'optim')
plot_df <- rbind(plot_df,
data.frame(X = X[, 2], y = (X %*% opt$theta), iter = rep(i, length(y))))
}
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red') +
geom_line(aes(x = X[,2], y = X %*% normalEquation(X, y, 0)), colour = 'red')
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='blue', high='red') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red') +
geom_line(aes(x = X[,2], y = X %*% normalEquation(X, y, 0)), colour = 'red')
#05D9F6
ggplot() +
geom_path(data = plot_df, aes(x = X, y = y, colour = iter)) +
labs(x = 'Change in water level (x)', y = 'Water flowing out of the dam (y)') +
scale_color_gradient(low='#05D9F6', high='#5011D1') +
geom_point(aes(x = X[, 2], y = y)) +
geom_point(aes(x = mean(X[, 2]), y = mean(y)), colour = 'red') +
geom_line(aes(x = X[,2], y = X %*% normalEquation(X, y, 0)), colour = 'red')

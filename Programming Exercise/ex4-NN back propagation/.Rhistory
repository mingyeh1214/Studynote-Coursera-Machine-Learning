plot2<- ggplot() +
geom_line(aes(x = 1:num_iters, y = result_std$J_vals)) +
labs(x = 'iteraton', y = 'J_val(normalized)')
grid.arrange(plot1, plot2, ncol = 2)
num_iters <- 5
for(i in c(0.01, 0.02, 0.03)){
assign(paste('result', i, sep = ''),
computeTheta(X, y, theta = c(0, 0),
alpha = i, lambda = 0, num_iters = num_iters, type = 'lin'))
}
ggplot() +
geom_line(aes(x = 1:num_iters, y = result0.01$J_vals, colour = '0.01')) +
geom_line(aes(x = 1:num_iters, y = result0.02$J_vals, colour = '0.02')) +
geom_line(aes(x = 1:num_iters, y = result0.03$J_vals, colour = '0.03')) +
labs(colour = 'alpha', x = 'iteration', y = 'J_val')
length <- 100
theta0_vals <- seq(-10, 10, length = length)
theta1_vals <- seq(-4, 4, length = length)
J_vals <- J_vals_std <- matrix(0, length, length)
for (i in 1:length){
for (j in 1:length){
t <- c(theta0_vals[i], theta1_vals[j])
J_vals[i, j] <- costFunction(X, y, theta = t, lambda = 0, type = 'lin')
J_vals_std[i, j] <- costFunction(X_std, y_std, theta = t, lambda = 0, type = 'lin')
}
}
plot_ly(x = theta0_vals, y = theta1_vals, z = J_vals) %>%
add_surface() %>%
layout(title = "",
scene = list(xaxis = list(title = "Theta0"),
yaxis = list(title = "Theta1"),
zaxis = list(title = "J_val")))
plot_ly(x = theta0_vals, y = theta1_vals, z = J_vals_std) %>%
add_surface() %>%
layout(title = "",
scene = list(xaxis = list(title = "Theta0"),
yaxis = list(title = "Theta1"),
zaxis = list(title = "J_val")))
temp <- data.frame(x = rep(theta0_vals, each = length),
y = rep(theta1_vals, times = length))
contour <- cbind(temp, z = as.numeric(log(t(J_vals))))
contour_std <- cbind(temp, z = as.numeric(log(t(J_vals_std))))
plot1 <- ggplot()+
geom_raster(data = contour, aes(x = x, y = y,fill = z), show.legend = FALSE) +
geom_contour(data = contour, aes(x = x, y = y, z = z, colour = ..level..),
colour = 'white', size = 0.5) +
scale_fill_gradientn(colors = brewer.pal(3, "PuBuGn")) +
geom_path(aes(x = result$theta_vals[, 1],
y = result$theta_vals[, 2]),
size = 1, colour = 'orange', alpha = 0.75) +
geom_point(aes(x = result$theta_vals[1, 1],
y = result$theta_vals[1, 2]),
size = 3, colour = 'blue',  alpha = 0.75) +
geom_point(aes(x = result$theta[1],
y = result$theta[2]),
size=3, colour = 'red', alpha = 0.75, shape = 4) +
labs(fill="J_val", title = '', x = 'Theta0', y = 'Theta1')
plot1 <- direct.label(plot1, "bottom.pieces")
plot2<-ggplot()+
geom_raster(data = contour_std, aes(x = x, y = y,fill = z), show.legend = FALSE) +
geom_contour(data = contour_std, aes(x = x, y = y, z = z, colour = ..level..),
colour = 'white', size = 0.5) +
scale_fill_gradientn(colors = brewer.pal(3, "PuBuGn")) +
geom_path(aes(x = result_std$theta_vals[, 1],
y = result_std$theta_vals[, 2]),
size = 1, colour = 'orange', alpha = 0.75) +
geom_point(aes(x = result_std$theta_vals[1, 1],
y = result_std$theta_vals[1, 2]),
size = 3, colour = 'blue',  alpha = 0.75) +
geom_point(aes(x = result_std$theta[1],
y = result_std$theta[2]),
size=3, colour = 'red', alpha = 0.75, shape = 4) +
labs(fill="J_val", title = '', x = 'Theta0', y = 'Theta1')
plot2 <- direct.label(plot2, "bottom.pieces")
grid.arrange(plot1, plot2, ncol = 2)
plot1 <-
plot_ly(x = theta0_vals, y = theta1_vals, z = log(t(J_vals)),
type = "contour", contours = list(showlabels = TRUE), showscale = FALSE) %>%
add_trace(x = result$theta_vals[1, 1],
y = result$theta_vals[1, 2],
mode = 'markers', type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10)) %>%
add_trace(x = result$theta_vals[, 1],
y = result$theta_vals[, 2],
mode = "lines", type = 'scatter', color = 'white') %>%
add_trace(x = result$theta[1],
y = result$theta[2],
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10)) %>%
layout(title = '',
xaxis = list(title = "Theta0", titlefont = f),
yaxis = list(title = "Theta1", titlefont = f),
showlegend = FALSE)
plot2 <-
plot_ly(x = theta0_vals, y = theta1_vals, z = log(t(J_vals_std)),
type = "contour", contours = list(showlabels = TRUE), showscale = FALSE) %>%
add_trace(x = result_std$theta_vals[1, 1],
y = result_std$theta_vals[1, 2],
mode = "markers", type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10)) %>%
add_trace(x = result_std$theta_vals[, 1],
y = result_std$theta_vals[, 2],
mode = "lines", type = 'scatter') %>%
add_trace(x = result_std$theta[1],
y = result_std$theta[2],
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10)) %>%
layout(title = '',
xaxis = list(title = "Theta0", titlefont = f),
yaxis = list(title = "Theta1", titlefont = f),
showlegend = FALSE)
subplot(plot1, plot2)
path = "data/ex1data2.txt"
data <- read.csv(path, header = FALSE)
data
X <- cbind(rep(1, dim(data)[1]), scale(data[, 1:(dim(data)[2] - 1)]))
y <- data[, dim(data)[2]]
# normal equation
theta <- normalEquation(X, y)
# gradient descent
theta_ini <- rep(0, dim(X)[2])
lambda <- 0
num_iters <- 50
for (i in c(0.3, 0.1, 0.03, 0.01)){
assign(paste('result', i, sep = ''),
computeTheta(X, y, theta_ini, alpha = i, lambda, num_iters, type = 'lin'))
}
# lm model
theta_glm <- glm(V3~., data = data)$coefficient
data.frame(theta_normal = theta,
theta_glm = theta_glm,
theta_0.3 = result0.3$theta,
theta_0.1 = result0.1$theta,
theta_0.03 = result0.03$theta,
theta_0.01 = result0.01$theta) %>% showdf()
ggplot() +
geom_line(aes(x = 1:num_iters, y = result0.3$J_vals, colour = '0.3'),
size = 1, alpha = 0.75, show_guide = TRUE) +
geom_line(aes(x = 1:num_iters, y = result0.1$J_vals, colour = '0.1'),
size = 1, alpha = 0.75, show_guide = TRUE) +
geom_line(aes(x = 1:num_iters, y = result0.03$J_vals, colour = '0.03'),
size = 1, alpha = 0.75, show_guide = TRUE) +
geom_line(aes(x = 1:num_iters, y = result0.01$J_vals, colour = '0.01'),
size = 1, alpha = 0.75, show_guide = TRUE) +
labs(colour = 'alpha', title = 'Normalized X', x = 'iteration', y = 'J_val')
path <- "data/ex2data1.txt"
data <- read.csv(path, header = FALSE)
data
X <- mapFeature(data[, 1:(dim(data)[2] - 1)])
y <- data[, dim(data)[2]]
data <- data.frame(X, y)
# gradient descent
theta <- rep(0, dim(X)[2])
alpha <- 0
lambda <- 0
num_iters <- c(10, 100, 1000)
for(i in num_iters){
assign(paste('result', i, sep = ''),
computeTheta(X, y, theta, alpha, lambda, num_iters = i, type = 'log'))
}
# 使用opti替代octave中的fminunc找最優解
theta_opt <- optim(par = theta, X = X, y = y, lambda = lambda, type = 'log',
fn = costFunction, gr = gradientFunction,
method = "Nelder-Mead", control = list(maxit = 1000))$par
# 使用glm
theta_glm <- glm(y~., data = data[, -1], family = "binomial")$coefficients
theta <- data.frame(theta_10 = result10$theta,
theta_100 = result100$theta,
theta_1000 = result1000$theta,
theta_optim = theta_opt,
theta_glm = theta_glm)
theta %>% showdf()
acc <- rep(0, 5)
for(i in 1:5){
acc[i] <- paste(mean((sigmoid(as.matrix(data[, 1:(dim(data)[2] - 1)]) %*% theta[, i]) >= 0.5) == data[, dim(data)[2]]) * 100, '%', sep = '')
}
acc <- data.frame(theta_10 = acc[1],
theta_100 = acc[2],
theta_1000 = acc[3],
theta_optim = acc[4],
theta_glm = acc[5])
rownames(acc) <- 'Accurate'
acc %>% showdf()
plot_gg <- ggplot() +
geom_point(data = data, aes(x1, x2, colour = factor(y), shape = factor(y)),
size = 3, alpha = 0.75) +
scale_shape_manual(values = c(4, 16),
guide = guide_legend(reverse = TRUE),
name = '',
breaks = c("0", "1"),
labels = c("Not Admitted", "Admitted")) +
scale_colour_manual(values = c('red','blue'),
guide = guide_legend(reverse = TRUE),
name = '',
breaks = c("0", "1"),
labels = c("Not Admitted", "Admitted")) +
labs(title = '', x = 'Exam 1 score', y = 'Exam 2 score') +
theme(legend.position="bottom")
plot_gg
trace1 <- data[data[, 'y'] == 0,]
trace2 <- data[data[, 'y'] == 1,]
plot_pl <- plot_ly() %>%
add_trace(data = trace2, x = ~x1, y = ~x2, name = 'Admitted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10),
showlegend = TRUE) %>%
add_trace(data = trace1, x = ~x1, y = ~x2, name = 'Not Admitted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10),
showlegend = TRUE) %>%
layout(title = '',
xaxis = list(title = 'exam1 score',
range = c(min(data$x1) - 2, max(data$x1) + 2),
titlefont = f),
yaxis = list(title = 'exam2 score',
range = c(min(data$x2) - 2, max(data$x2) + 2),
titlefont = f))
plot_pl
plot1 <- ggplot() + geom_line(aes(x = 1:num_iters[1], y = result10$J_vals)) +
labs(title = '', x = 'iteraion', y = 'J_vals')
plot2 <- ggplot() + geom_line(aes(x = 1:num_iters[2], y = result100$J_vals)) +
labs(title = '', x = 'iteraion', y = 'J_vals')
plot3 <- ggplot() + geom_line(aes(x = 1:num_iters[3], y = result1000$J_vals)) +
labs(title = '', x = 'iteraion', y = 'J_vals')
grid.arrange(plot1, plot2, plot3, ncol = 3)
plot1 <- plot_ly(x = 1:num_iters[1], y = result10$J_vals, mode = 'line', name = 'iter=10')
plot2 <- plot_ly(x = 1:num_iters[2], y = result100$J_vals, mode = 'line', name = 'iter=100')
plot3 <- plot_ly(x = 1:num_iters[3], y = result1000$J_vals, mode = 'line', name = 'iter=1000')
subplot(plot1, plot2, plot3) %>%
layout(yaxis = list(title = "J_val",
titlefont = f),
legend = list(orientation = 'h'))
theta <- result1000$theta
plot_x = c(min(X[, 2]), max(X[, 2]))
plot_y = -1 / theta[3] * (theta[2] * plot_x + theta[1])
trace3 <- data.frame(x = plot_x, y = plot_y)
plot1 <-
plot_gg + geom_path(data = trace3, aes(x = x, y = y),
colour = 'orange', size = 1, alpha = 0.75) +
labs(title = 'Dicision Boundary') +
coord_cartesian(xlim = c(min(data$x1), max(data$x1)),
ylim = c(min(data$x2), max(data$x2))) +
theme(legend.position = 'none')
y_pre <- sigmoid(as.matrix(data[, 1:(dim(data)[2] - 1)]) %*% theta) >= 0.5
data_pre <- cbind(data, y_pre)
plot2 <-
ggplot() +
geom_point(data = data_pre, aes(x1, x2, colour = factor(y_pre), shape = factor(y_pre)),
size = 3, alpha = 0.75) +
scale_shape_manual(values = c(4, 16)) +
scale_colour_manual(values = c('red','blue')) +
geom_path(data = trace3, aes(x = x, y = y),
colour = 'orange', size = 1, alpha = 0.75) +
labs(title = 'Dicision Boundary(predict)', x = 'Exam 1 score', y = 'Exam 2 score') +
coord_cartesian(xlim = c(min(data$x1), max(data$x1)),
ylim = c(min(data$x2), max(data$x2))) +
theme(legend.position = 'none')
grid.arrange(plot1, plot2, ncol = 2)
plot_ly() %>%
add_trace(data = trace2, x = ~x1, y = ~x2, name = 'Admitted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10), showlegend = TRUE) %>%
add_trace(data = trace1, x = ~x1, y = ~x2, name = 'Not Admitted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10), showlegend = TRUE) %>%
add_trace(data = trace3, x = ~x, y = ~y, mode = 'lines', name = 'Dicision Boundary') %>%
layout(xaxis = list(title = 'exam1 score', titlefont = f,
range = c(min(data$x1) - 2, max(data$x1 + 2))),
yaxis = list(title = 'exam2 score', titlefont = f,
range = c(min(data$x2) - 2, max(data$x2 + 2))))
path = "data/ex2data2.txt"
data <- read.csv(path, header = FALSE)
data
X <- mapFeature(data[, 1:(dim(data)[2] - 1)], 6)
y <- data[, dim(data)[2]]
data <- data.frame(X, y)
# gradient descent, set lambda = 0, 1, 100
theta <- rep(0, dim(X)[2])
lambda <- c(0, 1, 100)
num_iters <- 100
j <- 1
for(i in lambda){
assign(paste('result', j, sep = ''),
computeTheta(X, y, theta, alpha, lambda = i, num_iters, type = 'log'))
j <- j + 1
}
# opti, set lambda = 0, 1, 100
j <- 4
for(i in lambda){
assign(paste('result', j, sep = ''),
optim(par = theta, X = X, y = y, lambda = i, type = 'log',
fn = costFunction, gr = gradientFunction,
method = "BFGS"))
j <- j + 1
}
# glm
result7 <- glm(y~., data = data[, -1], family = "binomial")
theta <- data.frame(theta_0 = result1$theta,
theta_1 = result2$theta,
theta_100 = result3$theta,
theta_opt0 = result4$par,
theta_opt1 = result5$par,
theta_opt100 = result6$par,
theta_glm = result7$coefficients)
theta[1:5, ] %>% showdf()
acc <- rep(0, 7)
for(i in 1:7){
acc[i] <- paste(round(mean((sigmoid(as.matrix(data[, 1:(dim(data)[2] - 1)]) %*% theta[, i]) >= 0.5) == data[, dim(data)[2]]) * 100, 2), '%', sep = '')
}
acc <- data.frame(theta_0 = acc[1],
theta_1 = acc[2],
theta_100 = acc[3],
theta_opt0 = acc[4],
theta_opt1 = acc[5],
theta_opt100 = acc[6],
theta_glm = acc[7])
rownames(acc) <- 'Accurate'
acc %>% showdf()
plot_gg <- ggplot() +
geom_point(aes(x = data[data$y == 1, ]$x1, y = data[data$y == 1, ]$x2,
colour = 'Accepted', shape = 'Accepted')) +
geom_point(aes(x = data[data$y == 0, ]$x1, y = data[data$y == 0, ]$x2,
colour = 'Rejected', shape = 'Rejected')) +
scale_shape_manual(values = c(16, 4)) +
labs(title = '', x = 'Microchip Test 1', y = 'Microchip Test 2', colour = '', shape = '')
plot_gg
trace1 <- data[data[, 'y'] == 1,]
trace2 <- data[data[, 'y'] == 0,]
plot_ly() %>%
add_trace(data = trace1, x = ~x1, y = ~x2, name = 'Accepted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10)) %>%
add_trace(data = trace2, x = ~x1, y = ~x2, name = 'Rejected',
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10)) %>%
layout(title = '',
xaxis = list(title = 'Microchip Test 1',
titlefont = f),
yaxis = list(title = 'Microchip Test 2',
titlefont = f))
ggplot() +
geom_line(aes(x = 1:num_iters, y = result1$J_vals, colour = '0')) +
geom_line(aes(x = 1:num_iters, y = result2$J_vals, colour = '1')) +
geom_line(aes(x = 1:num_iters, y = result3$J_vals, colour = '100')) +
labs(title = '', x = 'iteraion', y = 'J_vals', colour = 'lambda')
plot_ly() %>%
add_trace(x = 1:num_iters, y = result1$J_vals, mode = 'line', name = 'lambda=0') %>%
add_trace(x = 1:num_iters, y = result2$J_vals, mode = 'line', name = 'lambda=1') %>%
add_trace(x = 1:num_iters, y = result3$J_vals, mode = 'line', name = 'lambda=100') %>%
layout(title = '',
xaxis = list(title = "iteraion",
titlefont = f),
yaxis = list(title = "J_vals",
titlefont = f))
drawLength <- 50
u <- v <- seq(-1, 1.5, length = drawLength)
for(i in 1:7) assign(paste('z', i, sep=''), matrix(0, drawLength, drawLength))
z <- list(z1, z2, z3, z4, z5, z6, z7)
for(k in 1:7){
for(i in 1:drawLength){
for(j in 1:drawLength){
z[[k]][j, i] <- mapFeature(cbind(u[i], v[j]), 6) %*% theta[, k]
}
}
}
coor<- data.frame(x = rep(u, each = drawLength),
y = rep(v, times = drawLength))
contour_list <- list(z1 = cbind(coor, z = c(z[[1]])),
z2 = cbind(coor, z = c(z[[2]])),
z3 = cbind(coor, z = c(z[[3]])),
z4 = cbind(coor, z = c(z[[4]])),
z5 = cbind(coor, z = c(z[[5]])),
z6 = cbind(coor, z = c(z[[6]])),
z7 = cbind(coor, z = c(z[[7]])))
j <- 1
for(i in c('lambda=0', 'lambda=1', 'lambda=100',
'opti lambda=0','opti lambda=1','opti lambda=100',
'glm')){
assign(paste('plot', j, sep = ''),
plot_gg +
geom_contour(data = contour_list[[j]], aes(x = x, y = y, z = z),
bins = 1, alpha = 0.75, size = 1) +
labs(title = i) +
coord_cartesian(xlim = c(min(data$x1), max(data$x1)),
ylim = c(min(data$x2), max(data$x2))) +
theme(legend.position = "none"))
j <- j + 1
}
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, ncol = 3)
plot_ly() %>%
add_trace(data = trace1, x = ~x1, y = ~x2, name = 'Accepted',
mode = "markers", type = 'scatter',
marker = list(symbol = 'o', color = 'blue', size = 10)) %>%
add_trace(data = trace2, x = ~x1, y = ~x2, name = 'Rejected',
mode = "markers", type = 'scatter',
marker = list(symbol = 'x', color = 'red', size = 10)) %>%
add_trace(x = u, y = v, z = z[[2]],
type = "contour", showscale = FALSE,
contours = list(coloring = 'lines',
showlabels = TRUE),
line = list(width = 2)) %>%
layout(title = 'Dicision Boundary',
xaxis = list(title = 'Microchip Test 1',
titlefont = f,
range = c(min(data$x1) - 0.1, max(data$x1) + 0.1)),
yaxis = list(title = 'Microchip Test 2',
titlefont = f,
range = c(min(data$x2) - 0.1, max(data$x2) + 0.1)))
path <- "data/ex3data1.mat"
data <- readMat(path)
X <- cbind(rep(1, dim(data$X)[1]), data$X)
y <- data$y
displayData(X[sample(dim(X)[1])[1:100], -1])
msg1 <- c('Use matrix\n')
for(i in c(0.1)){
for(j in c(3:3)){
all_theta <- oneVsAll(X, y, lambda = i, num_iters = j, num_labels = 10, method = 'matrix')
pred <- predictOneVsAll(all_theta, X)
accu <- round(mean(pred == y) * 100, 2)
msg1 <- paste(msg1,
paste("Training Set Accuracy with num_iters=", j, "& lambda=", i, "is:", accu, "%\n"))
}
}
msg2 <- c('Use optim\n')
for(i in c(0.1)){
for(j in c(50)){
all_theta <- oneVsAll(X, y, lambda = i, num_iters = j, num_labels = 10, method = 'optim')
pred <- predictOneVsAll(all_theta, X)
accu <- round(mean(pred == y) * 100, 2)
msg2 <- paste(msg2,
paste("Training Set Accuracy with num_iters=", j, "& lambda=", i, "is:", accu, "%\n"))
}
}
cat(paste(msg1, msg2, sep = ''))
path <- "data/ex3data1.mat"
data <- readMat(path)
X <- cbind(rep(1, dim(data$X)[1]), data$X)
y <- data$y
path <- "data/ex3weights.mat"
data <- readMat(path)
Theta1 <- data$Theta1
Theta2 <- data$Theta2
z1 <- X %*% t(Theta1)
h1 <- sigmoid(z1)
h1 <- cbind(rep(1, length = dim(h1)[1]), h1)
z2 <- h1 %*% t(Theta2)
h2 <- sigmoid(z2)
pred <- apply(h2, 1, which.max)
accu <- mean(pred == y) * 100
cat("Training Set Accuracy is:", accu, "%\n")
X <- X[, -1]
nn_params <-c(c(Theta1), c(Theta2))
input_layer_size <- dim(X)[2]
hidden_layer_size <- 25
num_labels <- 10
J_vals <- rep(0, 20)
for(i in 1:length(J_vals)){
J_vals[i] <-
nnCostFunction(input_layer_size, hidden_layer_size, num_labels, X, y, lambda = i - 1)(nn_params)
}
ggplot() + geom_line(aes(x = 1:length(J_vals), y = J_vals)) +
labs(x = 'lambda', y = 'J_val')
lambda <- 1
initial_Theta1 <- randInitializeWeights(input_layer_size, hidden_layer_size)
initial_Theta2 <- randInitializeWeights(hidden_layer_size, num_labels)
initial_nn_params <- c(initial_Theta1, initial_Theta2)
costFunction <- nnCostFunction(input_layer_size, hidden_layer_size,
num_labels, X, y, lambda)
gradFunction <- nnGradFunction(input_layer_size, hidden_layer_size,
num_labels, X, y, lambda)
# use optim
nn_params <- optim(par = initial_nn_params,
fn = costFunction, gr = gradFunction,
method = "BFGS", control = list(trace = 1, maxit = 50))$par
Theta1 <- matrix(nn_params[1:(hidden_layer_size * (input_layer_size + 1))],
hidden_layer_size,
(input_layer_size + 1))
Theta2 <- matrix(nn_params[(1 + (hidden_layer_size * (input_layer_size + 1))):length(nn_params)],
num_labels,
(hidden_layer_size + 1))
mean(predict(Theta1, Theta2, X) == y) * 100 # 94.16%
# use lbfgsb3
library(lbfgsb3c)
nn_params <- lbfgsb3_(initial_nn_params,
fn = costFunction, gr = gradFunction,
control = list(trace = 1, maxit = 50))$prm
Theta1 <- matrix(nn_params[1:(hidden_layer_size * (input_layer_size + 1))],
hidden_layer_size,
(input_layer_size + 1))
Theta2 <- matrix(nn_params[(1 + (hidden_layer_size * (input_layer_size + 1))):length(nn_params)],
num_labels,
(hidden_layer_size + 1))
mean(predict(Theta1, Theta2, X) == y) * 100 # 97.08%
checkNNGradients()
rp <- sample(5000)
for (i in 1:4){
displayData(X[rp[i], ])
cat('picture label:', y[rp[i], ]%%10, '\n')
cat('NN predict:', predict(Theta1, Theta2, X[rp[i], ])%%10, '\n')
}
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
